#!/bin/sh

###############################################################################
#
#  @file       ediff
#  @brief      Creates update package as diff of two input .tar.bz2 archives
#
#  @usage:     ./ediff old_fs.tar.bz2 new_fs_tar.bz2
#
#  @remarks:   * Strongly recommended to use #!/bin/sh instead of bash or other
#                shells. Bash is more relaxed and provides more functionality,
#                but this functionality on the other hand often doesn't even
#                work reliably accross different bash versions!
#
#              * Validator for shell scripting: http://www.shellcheck.net.
#
#  @copyright  Elnico Ltd. All rights reserved.
#  @author     Jan Kubiznak <kubiznak.jan@elnico.cz>
#
#  @version    1.0 2015-03-28: Jan Kubiznak <kubiznak.jan@elnico.cz>
#                              Initial revision.
#
################################################################################
# Return codes

EXIT_SUCCESS=0
EXIT_ERROR_WRONG_PARAMETERS=1
EXIT_ERROR_NO_INP_FILE=2
EXIT_ERROR_EXTRACTING_OLD=3
EXIT_ERROR_EXTRACTING_NEW=4

################################################################################
# Init

tool=$(readlink -f "$0")
tooldir=$(dirname "$tool")

old=$1
new=$2

name=eupdate
eremove=.eremove

tmp="$tooldir/tmp"
tmpold="$tmp/old"
tmpnew="$tmp/new"
tmpepd="$tmp/$name"
manifest="etc/eupdate/config/manifest"

################################################################################
# Functions

# Performs clenaup and quits
# Input: Return code
quit()
{
  if test -d "$tmp"; then
    rm -rf "$tmp"
  fi
  exit "$1"
}

# Creates all directories in a path name, if they don't exist already
# Input: Path name like "./etc/eupdate/test"
createdirs()
{
  local curpath=$(pwd)
  local IFS_orig=$IFS
  local IFS=/
  local path

  set -f                                                                        # Disable glob expansion
  path=$(dirname "$1")                                                          # Cuts "/" out + removes the file name ("test") in addition
  set +f

  path=${path#./}                                                               # Removes the "./" part - such dir shall not be created

  for dir in $path; do                                                          # Creates all dirs in $path
    if ! test -d "$dir"; then
      mkdir "$dir"
    fi
    cd "$dir"
  done

  IFS=$IFS_orig                                                                 # Restore
  cd "$curpath"
}

################################################################################

if [ $# -eq 0 ]; then
  echo "Please specify input files. Exiting..."
  exit $EXIT_ERROR_WRONG_PARAMETERS
fi

################################################################################
# Prepare temp directory

if test -d "$tmp"; then                                                         # Remove all possible content of the temp directory
  rm -rf "$tmp"
fi

if ! test -d "$tmp"; then                                                       # Create a temp directory if not exist
  mkdir "$tmp"
fi

################################################################################
# Extract old

echo "Extracting $old"

test -f "$old"
if [ "$?" -ne 0 ]; then
  echo "Error: Please specify old tar.bz2 file as first argument. Exiting..."
  quit $EXIT_ERROR_NO_INP_FILE
fi

mkdir "$tmpold"

tar -xjf "$old" -C "$tmpold"
if [ "$?" -ne 0 ]; then
  echo "Error: Extracting $old failed. Exiting..."
  quit $EXIT_ERROR_EXTRACTING_OLD
fi

################################################################################
# Extract new

echo "Extracting $new"

test -f "$new"
if [ "$?" -ne 0 ]; then
  echo "Error: Please specify new tar.bz2 file as first argument. Exiting..."
  quit $EXIT_ERROR_NO_INP_FILE
fi

mkdir "$tmpnew"

tar -xjf "$new" -C "$tmpnew"
if [ "$?" -ne 0 ]; then
  echo "Error: Extracting $new failed. Exiting..."
  quit $EXIT_ERROR_EXTRACTING_NEW
fi

################################################################################
# Obtains a list of all directories and files in old

cd "$tmpold"
tree="$(find)"

for file in $tree; do                                                           # Dirs
  if test -d "$tmpold/$file"; then
    olddirs="$olddirs $file"
  fi
done

for file in $tree; do                                                           # Files
  if test -f "$tmpold/$file"; then
    oldfiles="$oldfiles $file"
  fi
done

################################################################################
# Obtains a list of all directories and files in new

cd "$tmpnew"
tree="$(find)"

for file in $tree; do
  if test -d "$tmpnew/$file"; then
    newdirs="$newdirs $file"
  elif test -f "$tmpnew/$file"; then
    newfiles="$newfiles $file"
  elif test -h "$tmpnew/$file"; then
    newfiles="$newfiles $file"
  fi
done

################################################################################
# Prepares the update folder

mkdir "$tmpepd"
cd "$tmpepd"

for file in $oldfiles; do                                                       # Files to remove
  if ! test -f "$tmpnew/$file"; then
    echo "File to remove: $file"

    createdirs "$file"
    touch "$file$eremove"
  fi
done

for file in $olddirs; do                                                        # Directories to remove
  if ! test -d "$tmpnew/$file"; then
    echo "Dir to remove: $file"

    createdirs "$file"
    touch "$file$eremove"
  fi
done

for file in $newdirs; do                                                        # Directories to create
  if ! test -d "$tmpold/$file"; then
    echo "Dir to create: $file"

    createdirs "$file"
    mkdir "$file"
  fi
done

for file in $newfiles; do                                                       # File to copy
  if ! test -f "$tmpold/$file"; then
    echo "File to create: $file"

    createdirs "$file"
    cp -a "$tmpnew/$file" "$file"
  elif ! test -h "$tmpold/$file"; then
    echo "Link to create: $file"

    createdirs "$file"
    cp -a "$tmpnew/$file" "$file"
  else
    diff --brief "$tmpold/$file" "$tmpnew/$file" > /dev/null
    if [ "$?" -ne "0" ]; then
      echo "File to update: $file"

      createdirs "$file"
      cp -a "$tmpnew/$file" "$file"
    fi
  fi
done

################################################################################
# Adapts manifest

. "$tmpold/$manifest"

sed -i '/EUPDATE_APPLICABLE_FOR=/d' "$tmpnew/$manifest"
echo "export EUPDATE_APPLICABLE_FOR=\"${EUPDATE_VERSION}\"" >> "$tmpnew/$manifest"

cp "$tmpnew/$manifest" "$tmpepd/manifest"

################################################################################
# Generates the epd file

cd "$tooldir"
sh "$tooldir/edistro" "$tmp" --deploy

################################################################################

echo "Success. Exiting ediff..."
exit $EXIT_SUCCESS

################################################################################
