###############################################################################
#
#  @file       eupdate
#  @brief      Applies update
#
#  @usage:     1) Go to the eupdate working directory (required):
#                 cd /etc/eupdate
#              2) Start the script providing path to epd:
#                 ./eupdate eupdate.epd
#
#  @remarks:   * In the working directory new script called "erevert" will be 
#                created. Besides that the previous version will be backed up
#                to workdir/backup. To revert back to just run ./erevert.
#              * The tool expects to be located in /etc/eupdate. 
#
#  @copyright  Elnico Ltd. All rights reserved.
#  @author     Jan Kubiznak <kubiznak.jan@elnico.cz>
#
#  @version    1.0 2015-03-08: Jan Kubiznak <kubiznak.jan@elnico.cz>
#                              Initial revision.
#
################################################################################

#!/bin/sh

################################################################################
# Init

# Destination folder
workdir=$(pwd)
epd=$1

name=eupdate
tgz=$name.tgz
md5=$name.md5

tmp=$workdir/tmp/
config=$workdir/config/
backup=$workdir/backup
manifest=manifest
erevert=$workdir/erevert
eremove=.eremove

source=$tmp/eupdate/
dest=$workdir/../../

sourcetool=$source/etc/eupdate/$0
desttool=$workdir/$0

################################################################################
# Functions

function quit {
  # Performs clenaup and quits
  if test -d $tmp; then
    rm -r $tmp
  fi
  exit
}

################################################################################
# Prepare temp directory

if test -d $tmp; then                                                           # Remove all possible content of the temp directory
  rm -r $tmp
fi

if ! test -d $tmp; then                                                         # Create a temp directory if not exist
  mkdir $tmp
fi

################################################################################
# Extract the epd file into tmp

test -f $epd
if [ "$?" -ne 0 ]; then
  echo "Error: Please specify input epd file as first argument. Exiting..."
  quit
fi

tar -xzf $epd -C $tmp                                                           # Extract update to tmp
if [ "$?" -ne 0 ]; then
  echo "Error: Extracting $epd failed. Exiting..."
  quit
fi

################################################################################
# MD5 checksum & tgz extract

cd $tmp

test -f $md5
if [ "$?" -ne 0 ]; then
  echo "Error: $md5 file not found in $epd Exiting..."
  quit
fi

test -f $tgz
if [ "$?" -ne 0 ]; then
  echo "Error: $tgz file not found in $epd Exiting..."
  quit
fi

md5sum -c --status $md5                                                         # MD5 checksum check
if [ $? -ne 0 ]; then
  echo "Error: MD5 checksum mismatch. Exiting..."
  quit
fi
echo "MD5 checksum OK"

echo "Extracting $tgz"
tar -xzf $tgz -C $tmp                                                           # Extract update to tmp
if [ "$?" -ne 0 ]; then
  echo "Error: Extracting $tgz failed. Exiting..."
  quit
fi

################################################################################
# Version check

. $config/$manifest                                                             # Reads the installed version from the manifest file
cur_version=$EUPDATE_VERSION

. $source/$manifest                                                             # Reads the update version from the update manifest file
new_version=$EUPDATE_VERSION
updatable_from=$EUPDATE_APPLICABLE_FOR

updatable=0                                                                     # Searches if update could be applied to the currently installed version
for version in $updatable_from; do
  if [ "$version" == "$cur_version" ]; then
    updatable=1
    break
  fi
done

if [ "$updatable" -eq 0 ]; then                                                 # Exit if update not possible
  echo "Update from version $cur_version to version $new_version not possible"
  quit
fi

echo "Updating from version $cur_version to version $new_version"
cp $config/$manifest $config/$manifest.prev                                     # Overwrites the manifest file
cp $source/$manifest $config/$manifest
rm $source/$manifest

echo "rm $erevert" > $erevert
if test -f $config/$manifest.prev; then
  sed -i "1irm $config/$manifest.prev" $erevert
  sed -i "1icp $config/$manifest.prev $config/$manifest" $erevert
fi

chmod +x $erevert

################################################################################
# Obtains a list of all directories and files in source dir

cd $source
tree="$(find)"

for file in $tree; do                                                           # Dirs
  if test -d $source/$file; then
    dirs="$dirs $file"
  fi
done

for file in $tree; do                                                           # Files
  if test -f $source/$file; then
    echo $file | grep $eremove > /dev/null
    if [ $? -ne 0 ]; then
      files="$files $file"                                                      # Normal files
    else
      remfiles="$remfiles ${file%.*}"                                           # Special files (eremove)
    fi
  fi
done

################################################################################
# Tool update

if test -f $sourcetool; then
  diff --brief $sourcetool $desttool > /dev/null
  if [ "$?" -ne "0" ]; then
    echo "Updating the eupdate tool"
    cp $sourcetool $desttool

    echo "Restarting the script"
    cd $workdir
    sh $erevert
    sh $desttool $epd

    quit
  fi
fi

################################################################################
# Backup

if test -d $backup; then                                                        # Remove the previous backup
  rm -r $backup
fi

sed -i "1irmdir $backup" $erevert                                               # Create the backup directory
if ! test -d $backup; then
  mkdir $backup
fi

for file in $dirs; do                                                           # Creates directories which exist in source but not in backup.
  if ! test -d $backup/$file; then
    echo -e "Creating backup directory $backup/$file"

    sed -i "1irmdir $backup/$file" $erevert
    mkdir $backup/$file
  fi
done

for file in $files; do                                                          # Creates a backup file for every file in dest which is to be overwritten.
  if test -f $dest/$file; then
    echo -e "Making a backup for $dest/$file"

    sed -i "1irm ${backup}/${file}" $erevert
    sed -i "1icp ${backup}/${file} ${dest}/${file}" $erevert
    cp $dest/$file $backup/$file
  fi
done

for file in $remfiles; do                                                       # Creates a backup file for every file in dest which is to be deleted.
  if test -f $dest/$file; then
    echo -e "Making a backup for $dest/$file"

    sed -i "1irm ${backup}/${file}" $erevert
    sed -i "1icp ${backup}/${file} ${dest}/${file}" $erevert
    cp $dest/$file $backup/$file
  fi
done

################################################################################
# Deploy

for file in $dirs; do                                                           # Creates directories which exist in source but not in dest.
  if ! test -d $dest/$file; then
    echo -e "Creating new directory $dest/$file"

    sed -i "1irmdir $dest/$file" $erevert
    mkdir $dest/$file
  fi
done

for file in $files; do                                                          # Copies all files from source to dest.
  echo -e "Copying $dest/$file"

  sed -i "1irm $dest/$file" $erevert
  cp -a $source/$file $dest/$file
done

for file in $remfiles; do                                                       # Removes marked files.
  echo -e "Removing $dest/$file"

  rm -f $dest/$file
done

sed -i "1i#!/bin/sh" $erevert

################################################################################
# Cleanup and quit

quit
